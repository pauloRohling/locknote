// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_queries.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, email, password, created_at, created_by
FROM users
WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, name, email, password, created_at, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, password, created_at, created_by
`

type InsertUserParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy uuid.UUID `json:"createdBy"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
