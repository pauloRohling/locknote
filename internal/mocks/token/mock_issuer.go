// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocktoken

import (
	id "github.com/pauloRohling/locknote/internal/domain/types/id"
	mock "github.com/stretchr/testify/mock"

	token "github.com/pauloRohling/locknote/internal/domain/token"
)

// MockIssuer is an autogenerated mock type for the Issuer type
type MockIssuer struct {
	mock.Mock
}

type MockIssuer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuer) EXPECT() *MockIssuer_Expecter {
	return &MockIssuer_Expecter{mock: &_m.Mock}
}

// Issue provides a mock function with given fields: payload
func (_m *MockIssuer) Issue(payload token.Payload) (string, id.ID, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 string
	var r1 id.ID
	var r2 error
	if rf, ok := ret.Get(0).(func(token.Payload) (string, id.ID, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(token.Payload) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(token.Payload) id.ID); ok {
		r1 = rf(payload)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(id.ID)
		}
	}

	if rf, ok := ret.Get(2).(func(token.Payload) error); ok {
		r2 = rf(payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIssuer_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type MockIssuer_Issue_Call struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - payload token.Payload
func (_e *MockIssuer_Expecter) Issue(payload interface{}) *MockIssuer_Issue_Call {
	return &MockIssuer_Issue_Call{Call: _e.mock.On("Issue", payload)}
}

func (_c *MockIssuer_Issue_Call) Run(run func(payload token.Payload)) *MockIssuer_Issue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(token.Payload))
	})
	return _c
}

func (_c *MockIssuer_Issue_Call) Return(_a0 string, _a1 id.ID, _a2 error) *MockIssuer_Issue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIssuer_Issue_Call) RunAndReturn(run func(token.Payload) (string, id.ID, error)) *MockIssuer_Issue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuer creates a new instance of MockIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuer {
	mock := &MockIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
