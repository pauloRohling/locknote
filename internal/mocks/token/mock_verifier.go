// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocktoken

import (
	token "github.com/pauloRohling/locknote/internal/domain/token"
	mock "github.com/stretchr/testify/mock"
)

// MockVerifier is an autogenerated mock type for the Verifier type
type MockVerifier struct {
	mock.Mock
}

type MockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifier) EXPECT() *MockVerifier_Expecter {
	return &MockVerifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function with given fields: _a0
func (_m *MockVerifier) Verify(_a0 string) (*token.Payload, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *token.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*token.Payload, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *token.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockVerifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - _a0 string
func (_e *MockVerifier_Expecter) Verify(_a0 interface{}) *MockVerifier_Verify_Call {
	return &MockVerifier_Verify_Call{Call: _e.mock.On("Verify", _a0)}
}

func (_c *MockVerifier_Verify_Call) Run(run func(_a0 string)) *MockVerifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVerifier_Verify_Call) Return(_a0 *token.Payload, _a1 error) *MockVerifier_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerifier_Verify_Call) RunAndReturn(run func(string) (*token.Payload, error)) *MockVerifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifier creates a new instance of MockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifier {
	mock := &MockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
